<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot Shell</title>
  
  <subtitle>Futurevent</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robotshell.com/"/>
  <updated>2019-09-22T09:45:36.292Z</updated>
  <id>http://robotshell.com/</id>
  
  <author>
    <name>robot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fuchsia的运行初体验</title>
    <link href="http://robotshell.com/2019/09/22/os/build/"/>
    <id>http://robotshell.com/2019/09/22/os/build/</id>
    <published>2019-09-22T09:45:36.000Z</published>
    <updated>2019-09-22T09:45:36.292Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前几篇文章简单介绍了下Fuchsia中出现的与以往不同的概念。为了能够更直观的了解Fuchsia，这次让我们编译并运行Fuchsia。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>android之SystemServer的启动</title>
    <link href="http://robotshell.com/2019/09/18/android/BootSystemServer/"/>
    <id>http://robotshell.com/2019/09/18/android/BootSystemServer/</id>
    <published>2019-09-18T04:10:19.000Z</published>
    <updated>2019-09-21T15:21:18.856Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android系统中恐怕是没有任何一个进程有SystemServer重要了。Android的大量核心Service都运行在SystemServer上，这些核心的Service笼统的讲几乎能代表整个Android的Framework层。Android区别于Linux的关键又在于Framework层，所以更进一步讲SystemServer几乎又可代表整个Android系统了。&lt;br&gt;本文主要分析SystemServer的启动过程，分析的方法类似于从一个地方到另外一个地方的旅游，不只是单纯的到达目的地，也会欣赏沿路的风景。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia：万物皆实体</title>
    <link href="http://robotshell.com/2019/09/16/os/entity/"/>
    <id>http://robotshell.com/2019/09/16/os/entity/</id>
    <published>2019-09-16T03:24:24.000Z</published>
    <updated>2019-09-22T04:37:08.818Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Fuchsia简述的更多文章：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/08/30/os/what&#39;s%20fuchsia%20os/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Googel的Fuchsia OS到底是什么&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/09/06/os/stories&amp;modules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia的APP变革&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前在文章《Fuchsia的APP变革》中介绍过，Fuchisa的交互单位是story，而story是由一系列来自不同APP的module组合而成的。这些不同的module之间自然的就会涉及到通信问题。所以实体（entities）就应用而生了。Entity就如同胶水一般将各个module粘合在一次，从而构成story来供用户使用。同时这些从数字世界中抽象出的一个个实体，将作为数据单元被Google Assist读取使用，从而让Assistant获得理解用户使用上下文的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的APP变革</title>
    <link href="http://robotshell.com/2019/09/06/os/stories&amp;modules/"/>
    <id>http://robotshell.com/2019/09/06/os/stories&amp;modules/</id>
    <published>2019-09-06T06:17:34.000Z</published>
    <updated>2019-09-21T15:21:18.856Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相比之前的操作系统，Fuchsia做了很多的变革和特有的功能。Stories和Modules就是其中之一。这两个功能将颠覆之前对智能手机APP的使用方式，带来不一样的使用体验。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Google的Fuchsia OS到底是什么</title>
    <link href="http://robotshell.com/2019/08/30/os/what&#39;s%20fuchsia%20os/"/>
    <id>http://robotshell.com/2019/08/30/os/what&#39;s fuchsia os/</id>
    <published>2019-08-30T07:20:23.000Z</published>
    <updated>2019-09-21T15:21:18.768Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;2016年，谷歌开始了新一代操作系统Fuchsia OS的开发。该系统在当时被普遍认为是用来在将来替代Android系统的。然而，时间飞快，直到今日，Fuchsia OS似乎也没有太多的出现在大众的视野中，甚至很多从业人员对其也并不了解。实际上，Google也层低调的公布过一些进展，例如2017年的五月曾经发布过很有Fuchsia OS特征的Fuchsia OS的主界面，2018年层宣布Fuchsia OS成功在PiexlBook上成功运行。2019年的6月底，Goolge低调的上线了Fuchsia 的&lt;a href=&quot;https://fuchsia.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发者网站&lt;/a&gt;，后又适逢华为鸿蒙系统的发布，而华为鸿蒙系统也被理解为是android系统的替代者，Fuchsia OS又重新回到了大众的视野。&lt;br&gt;随着人们对鸿蒙系统关注度的提高，我觉得最好能简要介绍下Fuchsia到底是什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Harmony&amp;Fuchsia的相遇</title>
    <link href="http://robotshell.com/2019/08/16/os/harmony&amp;fuchsia/"/>
    <id>http://robotshell.com/2019/08/16/os/harmony&amp;fuchsia/</id>
    <published>2019-08-16T01:27:29.000Z</published>
    <updated>2019-09-21T15:21:18.756Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot; 一 &quot;&gt;&lt;/a&gt;&lt;center&gt; 一 &lt;/center&gt;&lt;/h1&gt;&lt;p&gt;2019年8月9日华为正式发布鸿蒙系统，同时表示系统开源。鸿蒙系统的发布是在美国制裁华为的大背景下，华为手机业务极度依赖的android系统极有可能随时断供。在此节点下，自然而然的会让大众理解为是对android断供风险的抵御。但是，时代是进步的。华为重造一个android不过是重嚼别人嚼过的甘蔗，又有何味道呢。华为可是5G的引领者，5G绝非是速度更快的4G，它的领域是万物互联的新一片星辰大海。理所应当的（如果一切不是场战略骗局的话），鸿蒙系统当是这片大海中的一艘远洋巨舰。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Robot OS 框架杂谈（二）：语音交互各厂产品</title>
    <link href="http://robotshell.com/2018/06/26/robot-os/arch/vui2/"/>
    <id>http://robotshell.com/2018/06/26/robot-os/arch/vui2/</id>
    <published>2018-06-26T12:07:19.000Z</published>
    <updated>2019-09-21T15:21:18.756Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;语音交互已经火了这么几年，涌现了许多的厂商。本文主要从什么是语音操作系统出发，到语音操作系统各公司的产品情况，到在语音交互下可以有哪些场景出发，做了总结。&lt;/p&gt;
    
    </summary>
    
      <category term="机器人OS" scheme="http://robotshell.com/categories/robot-os/"/>
    
      <category term="架构" scheme="http://robotshell.com/categories/robot-os/arch/"/>
    
    
      <category term="机器人" scheme="http://robotshell.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>android性能优化之帧率测试</title>
    <link href="http://robotshell.com/2018/06/21/android/test/optimization%20frame%20rate/"/>
    <id>http://robotshell.com/2018/06/21/android/test/optimization frame rate/</id>
    <published>2018-06-21T10:17:49.000Z</published>
    <updated>2019-09-21T15:21:18.752Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作为一名anroid开发，经常会听到产品或者测试说，他们感觉界面卡顿。然而这感觉二字该如何修改？须得以数字说话方可。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
      <category term="测试" scheme="http://robotshell.com/categories/android/test/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Robot OS 框架杂谈</title>
    <link href="http://robotshell.com/2018/06/21/robot-os/arch/vui1/"/>
    <id>http://robotshell.com/2018/06/21/robot-os/arch/vui1/</id>
    <published>2018-06-21T06:51:22.000Z</published>
    <updated>2019-09-21T15:21:18.752Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大概是2015年开始，人工智能突起，出现了非常多家的机器人公司，其中有一类发力于家庭服务机器人。为了满足各家机器人的使用需要，各家争相开发自己的机器人OS，或者叫机器人框架。&lt;br&gt;时至今日，有的机器人OS已经死亡，有的奄奄一息，有的还在继续成长，有的已经成熟。有幸接触了几家的OS，现罗列如下，以作纪念。&lt;/p&gt;
    
    </summary>
    
      <category term="机器人OS" scheme="http://robotshell.com/categories/robot-os/"/>
    
      <category term="架构" scheme="http://robotshell.com/categories/robot-os/arch/"/>
    
    
      <category term="机器人" scheme="http://robotshell.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu grub 引导丢失修复</title>
    <link href="http://robotshell.com/2018/03/13/skill/grub%20repair/"/>
    <id>http://robotshell.com/2018/03/13/skill/grub repair/</id>
    <published>2018-03-13T13:45:50.000Z</published>
    <updated>2019-09-21T15:21:18.752Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-工作就得这么弄&quot;&gt;&lt;a href=&quot;#第一章-工作就得这么弄&quot; class=&quot;headerlink&quot; title=&quot;第一章 工作就得这么弄&quot;&gt;&lt;/a&gt;第一章 工作就得这么弄&lt;/h1&gt;&lt;p&gt;自己家的电脑，需要能写代码，也要能供不写代码的时候用，比起ubuntu来说，win10还是要好用非常多的，何况买的dell品牌台式机，win1o 是正版的，office是正版的，还有dell的一堆服务，废了多可惜啊，都是钱买的。所以一狠心，一咬牙装了个win10+ubuntu的双系统。&lt;/p&gt;
&lt;p&gt;两年了，除了装系统的时候费了点事，一直以来大家相安无事，各过各的。ubuntu一路从16.04升级到了17.10没出过任何叉子，windows10？还好吧，一直以来也本本分分的。&lt;/p&gt;
&lt;p&gt;直到昨天晚上，都要睡觉了，翻着墙看了个乐视网的微电影。这有毛病吗？关机的时候，点错了，关机按钮点到了重启上，这有毛病吗？然后就重启了，然后就没出现grub的引导，直接进入了win10。心里暗骂一句，微软流氓，肯定是悄悄升级了，还改了efi文件。多大点事啊，上网找个攻略修一下也就好了，遂找了一篇，照着鼓捣。这次倒好，直接提示，没有可引导的设备。&lt;/p&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://robotshell.com/categories/skill/"/>
    
    
      <category term="技巧" scheme="http://robotshell.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>android O 电源管理之从设备唤醒谈起</title>
    <link href="http://robotshell.com/2018/03/11/android/power%20wakeup/"/>
    <id>http://robotshell.com/2018/03/11/android/power wakeup/</id>
    <published>2018-03-11T05:39:30.000Z</published>
    <updated>2019-09-21T15:21:18.752Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为何从此谈起&quot;&gt;&lt;a href=&quot;#为何从此谈起&quot; class=&quot;headerlink&quot; title=&quot;为何从此谈起&quot;&gt;&lt;/a&gt;为何从此谈起&lt;/h1&gt;&lt;p&gt;andoird PowerManagerService 中有一个成员变量mWakefulness，其定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Indicates whether the device is awake or asleep or somewhere in between.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This is distinct from the screen power state, which is managed separately.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mWakefulness;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注释写的很明白，用来指示当前设备是醒是睡还是处于半醒半睡间的某中状态，本文即从此处讲起。&lt;/p&gt;
&lt;p&gt;无论设备电源状态如何变化，走了多少曲折的流程，最终会层层调用到对该变量的修改，用以指示设备电源变化后的状态，设备唤醒也不例外。常见的分析电源管理的文章多分析电源管理的框架结构及调用流程，鲜有对唤醒后，睡眠前其他模块所做工作的描述。本篇即主要阐述设备从睡眠状态唤醒，设置mWakefulness为WAKEFULNESS_AWAKE后，整个系统都做了些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android包管理之App安装前的校验</title>
    <link href="http://robotshell.com/2018/02/06/android/package%20verify/"/>
    <id>http://robotshell.com/2018/02/06/android/package verify/</id>
    <published>2018-02-06T13:32:49.000Z</published>
    <updated>2019-09-21T15:21:18.752Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识Package-Verification&quot;&gt;&lt;a href=&quot;#初识Package-Verification&quot; class=&quot;headerlink&quot; title=&quot;初识Package Verification&quot;&gt;&lt;/a&gt;初识Package Verification&lt;/h1&gt;&lt;p&gt;之前在做机器人操作系统的时候有过这样的需求，希望在安装应用的时候判断该应用是否符合机器人系统的操作规范，说白了就是需要扫描一下这个apk，是否符合某些规则。当然，这个需求可以在andoird 安装应用的过程实现。但是查看源码发现了Package Verification，这是一个没有多少文档介绍也没有相应demo的特性。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android O 电源管理之从automotive谈起</title>
    <link href="http://robotshell.com/2018/02/04/android/power%20automotive/"/>
    <id>http://robotshell.com/2018/02/04/android/power automotive/</id>
    <published>2018-02-03T16:15:49.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;android o 在源码工程/package/service/目录下新增了一个目录Car, 做为android automotive的重要组成部分，这部分可理解为在android世界的基础上，调用android的api构造出的Vehicle框架，该框架将android这一系统获得从手机迁移到目前最大的智能设备————车上的能力。&lt;br&gt;从automotive 开始分析android O 的电源管理，一方面可以站在android api用户的角度，从调用逐层的深入下去直达kernel，另一方面也可以帮助理清android automotive的框架结构。对于android automotive的框架结构的更详细的介绍可以参考另外的说明，本文当然重点还是在于从头到位的串讲下android O的电源管理。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android O Vehicle之Car Service</title>
    <link href="http://robotshell.com/2018/02/03/android/carservice/"/>
    <id>http://robotshell.com/2018/02/03/android/carservice/</id>
    <published>2018-02-03T10:28:49.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Car Service 是 android O automotive 的核心实现。第一承担部分具体业务逻辑，第二向上为Car API 提供支撑，第三向下调用android api 或者调用 Vehicle Hal 获取车辆数据，控制车辆行为。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android O Vehicle之架构介绍</title>
    <link href="http://robotshell.com/2018/02/03/android/vehclearch/"/>
    <id>http://robotshell.com/2018/02/03/android/vehclearch/</id>
    <published>2018-02-03T10:28:31.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android Automotive 是 Android Orea 中的一个特色功能，从AOSP的代码上看，android automotive 已经包含了从app层到framework层到hal层的各层级结构。本文简单介绍 Android Orea Vehicle 的架构形式&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android-EventLog-Tags 说明</title>
    <link href="http://robotshell.com/2018/01/08/android/eventlog/"/>
    <id>http://robotshell.com/2018/01/08/android/eventlog/</id>
    <published>2018-01-08T15:35:54.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Event Log, 官方的解释为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System diagnostic event record. System diagnostic events are used to record certain system-level events (such as garbage collection, activity manager state, system watchdogs, and other low level activity), which may be automatically collected and analyzed during system development.&lt;br&gt;This is not the main “logcat” debugging log (Log)! These diagnostic events are for system integrators, not application authors.&lt;br&gt;Events use integer tag codes corresponding to /system/etc/event-log-tags. They carry a payload of one or more int, long, or String values. The event-log-tags file defines the payload contents for each type code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是说，是系统诊断事件的记录。这些事件都是系统级别事件，例如垃圾回收，ActivityManager的状态，系统看门够以及一些其他的事件。这些事件在系统开发的过程中会被自动的采集和分析。这些事件不是main debug调试log，它是给系统开发集成商看的，不是给应用开发者看的。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Linux-安装和使用Cisco AnyConnect Client</title>
    <link href="http://robotshell.com/2018/01/07/tool/anyconnect/"/>
    <id>http://robotshell.com/2018/01/07/tool/anyconnect/</id>
    <published>2018-01-07T05:12:39.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以前使用的vpn到期了，而且最近查的挺严，原先的好多vpn都用不了了，在同事的推荐下使用&lt;a href=&quot;https://edgevpn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;矩阵研究所&lt;/strong&gt;
&lt;/a&gt;自己搭建的shadowsocks翻墙上网，他提供了windows、ios、android各平台的客户端，唯独未提供linux的客户端。不过他还好支持anyconnect，所以在linux还是可以配置anyconnect client 进行使用的。配置过程记录如下，供以后参考。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://robotshell.com/categories/tool/"/>
    
    
      <category term="工具" scheme="http://robotshell.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux 版本控制工具之rabbitvcs</title>
    <link href="http://robotshell.com/2017/11/04/tool/rabbitvcs/"/>
    <id>http://robotshell.com/2017/11/04/tool/rabbitvcs/</id>
    <published>2017-11-04T04:08:10.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;新公司的文档管理居然使用ｓｖｎ，不知道适合原因．很久不用有一些忘却了.之前在win下用的是TortoiseSVN，在ubuntu下，与之及其相似的是rabbitvcs．&lt;br&gt;&lt;a href=&quot;http://rabbitvcs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://robotshell.com/categories/tool/"/>
    
    
      <category term="工具" scheme="http://robotshell.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>纵论物联网</title>
    <link href="http://robotshell.com/2017/10/26/iot/0/"/>
    <id>http://robotshell.com/2017/10/26/iot/0/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2019-09-21T15:21:18.728Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在网上看到一篇介绍物联网的系列文章《纵论物联网》，但是很遗憾，都是来回转载的，也没有找到出处，零零散散的，东一篇西一篇，看起来很不方便。现汇总收集如下，既做整理，也做收藏。&lt;/p&gt;
    
    </summary>
    
      <category term="物联网" scheme="http://robotshell.com/categories/iot/"/>
    
    
      <category term="物联网" scheme="http://robotshell.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>纵论物联网（十）：物联网应用层协议</title>
    <link href="http://robotshell.com/2017/10/26/iot/10/"/>
    <id>http://robotshell.com/2017/10/26/iot/10/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2019-09-21T15:21:18.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;导语&lt;br&gt;物联网的关键技术主要解决三个方面的问题：&lt;u&gt;物体的识别、物体的连接、物体的数据交换&lt;/u&gt;。每个方面都有一些技术解决方案，在前面的文章中，我们介绍了RFID、NFC等物体识别及电子标签的技术，也介绍了物联网节点组网与接入的技术。这篇文章主要讲一下物联网的数据是如何处理的。&lt;br&gt;&lt;img src=&quot;http://ovfro7ddi.bkt.clouddn.com/%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%EF%BC%91.JPEG&quot; alt=&quot;keyTec&quot;&gt;&lt;br&gt;物联网关键技术大全&lt;/p&gt;
    
    </summary>
    
      <category term="物联网" scheme="http://robotshell.com/categories/iot/"/>
    
    
      <category term="物联网" scheme="http://robotshell.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
</feed>
