<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot Shell</title>
  
  <subtitle>Futurevent</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robotshell.com/"/>
  <updated>2019-12-05T09:35:15.487Z</updated>
  <id>http://robotshell.com/</id>
  
  <author>
    <name>robot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fuchsia模块化的四大组件之二</title>
    <link href="http://robotshell.com/2019/12/05/os/modular%20component2/"/>
    <id>http://robotshell.com/2019/12/05/os/modular component2/</id>
    <published>2019-12-05T09:35:15.000Z</published>
    <updated>2019-12-05T09:35:15.487Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;参考前文：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/28/os/modular%20component/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化的四大组件之一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在前文对于&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;的介绍中提到，用户可以通过开发module、agent、entryprovider类别的组件来实现具体的业务逻辑，扩展系统的能力。这三大组件再结合由module组合而成的story，可以称之为是fuchsia系统内的四大组件。本文依次介绍这几种组件都是些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化的四大组件之一</title>
    <link href="http://robotshell.com/2019/11/28/os/modular%20component/"/>
    <id>http://robotshell.com/2019/11/28/os/modular component/</id>
    <published>2019-11-28T08:55:39.000Z</published>
    <updated>2019-11-28T08:55:39.271Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在前文对于&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;的介绍中提到，用户可以通过开发module、agent、entryprovider类别的组件来实现具体的业务逻辑，扩展系统的能力。这三大组件再结合由module组合而成的story，可以称之为是fuchsia系统内的四大组件。本文依次介绍这几种组件都是些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化介绍</title>
    <link href="http://robotshell.com/2019/11/20/os/modular/"/>
    <id>http://robotshell.com/2019/11/20/os/modular/</id>
    <published>2019-11-20T07:19:24.000Z</published>
    <updated>2019-11-20T07:19:24.915Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Fuchisa的应用程序及应用程序框架是一个模块化的框架。Fuchsia系统中的组件包含着UI、数据、用户等内容，模块化框架将这些组合在一个逻辑概念上的可视化的被叫做story的容器中。从而实现对用户体验的统一管理。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Component 能力介绍</title>
    <link href="http://robotshell.com/2019/11/12/os/component%20capabilities/"/>
    <id>http://robotshell.com/2019/11/12/os/component capabilities/</id>
    <published>2019-11-12T09:17:26.000Z</published>
    <updated>2019-11-12T09:17:26.432Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Capabilities 理解为能力、功能，就是赋予一个组件能够连接和读取其他组件提供的能力的权限。&lt;br&gt;fuchsia 中组件的能力，有三种，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory 能力&lt;/li&gt;
&lt;li&gt;Service 能力&lt;/li&gt;
&lt;li&gt;Storage 能力&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Component manifests介绍</title>
    <link href="http://robotshell.com/2019/11/05/os/component%20manifest/"/>
    <id>http://robotshell.com/2019/11/05/os/component manifest/</id>
    <published>2019-11-05T08:52:43.000Z</published>
    <updated>2019-11-05T08:52:43.216Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;清单文件是用来描述组件的一个描述文件，扩展名为.cmx。通常位于工程的meta目录下。描述一个组件通常包含如下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于如何运行组件的信息&lt;/li&gt;
&lt;li&gt;子组件实例和组件集合的描述&lt;/li&gt;
&lt;li&gt;描述如何在组件之间使用、发布和提供功能的路由规则。&lt;/li&gt;
&lt;li&gt;自由形式的数据（“facets”）被组件框架忽略，但可以由第三方解释（类似android清单文件中的meta-data 数据）。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa Component介绍</title>
    <link href="http://robotshell.com/2019/10/28/os/component/"/>
    <id>http://robotshell.com/2019/10/28/os/component/</id>
    <published>2019-10-28T09:07:37.000Z</published>
    <updated>2019-10-28T09:14:43.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Fuchsia系统中，Component是最基本的执行单元，他们对外提供能力也消费其他组件的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa之PackageManager</title>
    <link href="http://robotshell.com/2019/10/21/os/pm/"/>
    <id>http://robotshell.com/2019/10/21/os/pm/</id>
    <published>2019-10-21T09:29:16.000Z</published>
    <updated>2019-10-21T09:29:16.180Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上周，在Fuchsia OS上运行了第一个demo——HelloWorld，了解到编译完成后，需要使用fx的命令将编译好的Fuchisa的应用包传送到系统中，从而得到运行。本周简单介绍下Fuchsia Package。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa运行Hello,World</title>
    <link href="http://robotshell.com/2019/10/14/os/HelloWorld/"/>
    <id>http://robotshell.com/2019/10/14/os/HelloWorld/</id>
    <published>2019-10-14T08:16:38.000Z</published>
    <updated>2019-10-14T08:16:38.470Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的几篇一直都在介绍Fuchsia的一些概念，本文将在Fuchsia上运行我们的第一个应用，通过该示例可以快速了解到Fuchsia的components是如何编译、运行及测试的。Hello Fuchsia，Hello World。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的fx命令</title>
    <link href="http://robotshell.com/2019/09/29/os/fx/"/>
    <id>http://robotshell.com/2019/09/29/os/fx/</id>
    <published>2019-09-29T07:08:04.000Z</published>
    <updated>2019-09-29T07:08:04.901Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前在介绍fuchsia的编译（fuchsia的编译参考文章：&lt;a href=&quot;https://www.robotshell.com/2019/09/22/os/build/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia的运行初体验&lt;/a&gt;）的时候提到配置fuchsia的编译产品，以及编译fuchsia系统都会使用到fx命令。&lt;br&gt;fx对于Fuchsia的重要性，大概等于编译命令+adb 对于Android的重要性。而且fx有非常多的自命令，本文仅参考官方文档&lt;a href=&quot;https://fuchsia.dev/fuchsia-src/development/workflows/fx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fx workflows&lt;/a&gt;,对部分fx的自命令进行简单介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的数据存储变革</title>
    <link href="http://robotshell.com/2019/09/25/os/ledger/"/>
    <id>http://robotshell.com/2019/09/25/os/ledger/</id>
    <published>2019-09-25T09:38:47.000Z</published>
    <updated>2019-09-25T09:38:47.263Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;根据之前的介绍，Fuchsia引入了一个新的概念Story，Story由一系列的app组成用来完成独立的任务。在Fuchsia上，你可以快速的在不同的设备上切换以使用这些创建好的Story，而可以这样做的原因是，Fuchsia将这些Story的信息保存在了你的个人ledger中。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的运行初体验</title>
    <link href="http://robotshell.com/2019/09/22/os/build/"/>
    <id>http://robotshell.com/2019/09/22/os/build/</id>
    <published>2019-09-22T09:45:36.000Z</published>
    <updated>2019-09-23T02:00:32.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前几篇文章简单介绍了下Fuchsia中出现的与以往不同的概念。为了能够更直观的了解Fuchsia，这次让我们编译并运行Fuchsia。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>android之SystemServer的启动</title>
    <link href="http://robotshell.com/2019/09/18/android/BootSystemServer/"/>
    <id>http://robotshell.com/2019/09/18/android/BootSystemServer/</id>
    <published>2019-09-18T04:10:19.000Z</published>
    <updated>2019-09-18T04:10:19.255Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android系统中恐怕是没有任何一个进程有SystemServer重要了。Android的大量核心Service都运行在SystemServer上，这些核心的Service笼统的讲几乎能代表整个Android的Framework层。Android区别于Linux的关键又在于Framework层，所以更进一步讲SystemServer几乎又可代表整个Android系统了。&lt;br&gt;本文主要分析SystemServer的启动过程，分析的方法类似于从一个地方到另外一个地方的旅游，不只是单纯的到达目的地，也会欣赏沿路的风景。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia：万物皆实体</title>
    <link href="http://robotshell.com/2019/09/16/os/entity/"/>
    <id>http://robotshell.com/2019/09/16/os/entity/</id>
    <published>2019-09-16T03:24:24.000Z</published>
    <updated>2019-09-16T03:24:24.167Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Fuchsia简述的更多文章：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/08/30/os/what&#39;s%20fuchsia%20os/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Googel的Fuchsia OS到底是什么&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/09/06/os/stories&amp;modules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia的APP变革&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前在文章《Fuchsia的APP变革》中介绍过，Fuchisa的交互单位是story，而story是由一系列来自不同APP的module组合而成的。这些不同的module之间自然的就会涉及到通信问题。所以实体（entities）就应用而生了。Entity就如同胶水一般将各个module粘合在一次，从而构成story来供用户使用。同时这些从数字世界中抽象出的一个个实体，将作为数据单元被Google Assist读取使用，从而让Assistant获得理解用户使用上下文的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的APP变革</title>
    <link href="http://robotshell.com/2019/09/06/os/stories&amp;modules/"/>
    <id>http://robotshell.com/2019/09/06/os/stories&amp;modules/</id>
    <published>2019-09-06T06:17:34.000Z</published>
    <updated>2019-09-06T06:17:34.668Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相比之前的操作系统，Fuchsia做了很多的变革和特有的功能。Stories和Modules就是其中之一。这两个功能将颠覆之前对智能手机APP的使用方式，带来不一样的使用体验。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Google的Fuchsia OS到底是什么</title>
    <link href="http://robotshell.com/2019/08/30/os/what&#39;s%20fuchsia%20os/"/>
    <id>http://robotshell.com/2019/08/30/os/what&#39;s fuchsia os/</id>
    <published>2019-08-30T07:20:23.000Z</published>
    <updated>2019-09-04T10:09:45.625Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;2016年，谷歌开始了新一代操作系统Fuchsia OS的开发。该系统在当时被普遍认为是用来在将来替代Android系统的。然而，时间飞快，直到今日，Fuchsia OS似乎也没有太多的出现在大众的视野中，甚至很多从业人员对其也并不了解。实际上，Google也层低调的公布过一些进展，例如2017年的五月曾经发布过很有Fuchsia OS特征的Fuchsia OS的主界面，2018年层宣布Fuchsia OS成功在PiexlBook上成功运行。2019年的6月底，Goolge低调的上线了Fuchsia 的&lt;a href=&quot;https://fuchsia.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开发者网站&lt;/a&gt;，后又适逢华为鸿蒙系统的发布，而华为鸿蒙系统也被理解为是android系统的替代者，Fuchsia OS又重新回到了大众的视野。&lt;br&gt;随着人们对鸿蒙系统关注度的提高，我觉得最好能简要介绍下Fuchsia到底是什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Harmony&amp;Fuchsia的相遇</title>
    <link href="http://robotshell.com/2019/08/16/os/harmony&amp;fuchsia/"/>
    <id>http://robotshell.com/2019/08/16/os/harmony&amp;fuchsia/</id>
    <published>2019-08-16T01:27:29.000Z</published>
    <updated>2019-09-04T10:09:25.881Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot; 一 &quot;&gt;&lt;/a&gt;&lt;center&gt; 一 &lt;/center&gt;&lt;/h1&gt;&lt;p&gt;2019年8月9日华为正式发布鸿蒙系统，同时表示系统开源。鸿蒙系统的发布是在美国制裁华为的大背景下，华为手机业务极度依赖的android系统极有可能随时断供。在此节点下，自然而然的会让大众理解为是对android断供风险的抵御。但是，时代是进步的。华为重造一个android不过是重嚼别人嚼过的甘蔗，又有何味道呢。华为可是5G的引领者，5G绝非是速度更快的4G，它的领域是万物互联的新一片星辰大海。理所应当的（如果一切不是场战略骗局的话），鸿蒙系统当是这片大海中的一艘远洋巨舰。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Robot OS 框架杂谈（二）：语音交互各厂产品</title>
    <link href="http://robotshell.com/2018/06/26/robot-os/arch/vui2/"/>
    <id>http://robotshell.com/2018/06/26/robot-os/arch/vui2/</id>
    <published>2018-06-26T12:07:19.000Z</published>
    <updated>2019-09-04T10:08:50.698Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;语音交互已经火了这么几年，涌现了许多的厂商。本文主要从什么是语音操作系统出发，到语音操作系统各公司的产品情况，到在语音交互下可以有哪些场景出发，做了总结。&lt;/p&gt;
    
    </summary>
    
      <category term="机器人OS" scheme="http://robotshell.com/categories/robot-os/"/>
    
      <category term="架构" scheme="http://robotshell.com/categories/robot-os/arch/"/>
    
    
      <category term="机器人" scheme="http://robotshell.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>android性能优化之帧率测试</title>
    <link href="http://robotshell.com/2018/06/21/android/test/optimization%20frame%20rate/"/>
    <id>http://robotshell.com/2018/06/21/android/test/optimization frame rate/</id>
    <published>2018-06-21T10:17:49.000Z</published>
    <updated>2019-09-04T10:08:23.570Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作为一名anroid开发，经常会听到产品或者测试说，他们感觉界面卡顿。然而这感觉二字该如何修改？须得以数字说话方可。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
      <category term="测试" scheme="http://robotshell.com/categories/android/test/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Robot OS 框架杂谈</title>
    <link href="http://robotshell.com/2018/06/21/robot-os/arch/vui1/"/>
    <id>http://robotshell.com/2018/06/21/robot-os/arch/vui1/</id>
    <published>2018-06-21T06:51:22.000Z</published>
    <updated>2019-09-24T06:21:53.392Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大概是2015年开始，人工智能突起，出现了非常多家的机器人公司，其中有一类发力于家庭服务机器人。为了满足各家机器人的使用需要，各家争相开发自己的机器人OS，或者叫机器人框架。&lt;br&gt;时至今日，有的机器人OS已经死亡，有的奄奄一息，有的还在继续成长，有的已经成熟。有幸接触了几家的OS，现罗列如下，以作纪念。&lt;/p&gt;
    
    </summary>
    
      <category term="机器人OS" scheme="http://robotshell.com/categories/robot-os/"/>
    
      <category term="架构" scheme="http://robotshell.com/categories/robot-os/arch/"/>
    
    
      <category term="机器人" scheme="http://robotshell.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu grub 引导丢失修复</title>
    <link href="http://robotshell.com/2018/03/13/skill/grub%20repair/"/>
    <id>http://robotshell.com/2018/03/13/skill/grub repair/</id>
    <published>2018-03-13T13:45:50.000Z</published>
    <updated>2019-09-04T10:07:28.588Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-工作就得这么弄&quot;&gt;&lt;a href=&quot;#第一章-工作就得这么弄&quot; class=&quot;headerlink&quot; title=&quot;第一章 工作就得这么弄&quot;&gt;&lt;/a&gt;第一章 工作就得这么弄&lt;/h1&gt;&lt;p&gt;自己家的电脑，需要能写代码，也要能供不写代码的时候用，比起ubuntu来说，win10还是要好用非常多的，何况买的dell品牌台式机，win1o 是正版的，office是正版的，还有dell的一堆服务，废了多可惜啊，都是钱买的。所以一狠心，一咬牙装了个win10+ubuntu的双系统。&lt;/p&gt;
&lt;p&gt;两年了，除了装系统的时候费了点事，一直以来大家相安无事，各过各的。ubuntu一路从16.04升级到了17.10没出过任何叉子，windows10？还好吧，一直以来也本本分分的。&lt;/p&gt;
&lt;p&gt;直到昨天晚上，都要睡觉了，翻着墙看了个乐视网的微电影。这有毛病吗？关机的时候，点错了，关机按钮点到了重启上，这有毛病吗？然后就重启了，然后就没出现grub的引导，直接进入了win10。心里暗骂一句，微软流氓，肯定是悄悄升级了，还改了efi文件。多大点事啊，上网找个攻略修一下也就好了，遂找了一篇，照着鼓捣。这次倒好，直接提示，没有可引导的设备。&lt;/p&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://robotshell.com/categories/skill/"/>
    
    
      <category term="技巧" scheme="http://robotshell.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
