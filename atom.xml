<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot Shell</title>
  
  <subtitle>Futurevent</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robotshell.com/"/>
  <updated>2020-06-03T09:18:50.508Z</updated>
  <id>http://robotshell.com/</id>
  
  <author>
    <name>robot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中国物联网产业报告_2020</title>
    <link href="http://robotshell.com/2020/06/03/iot/iot_report_2020/"/>
    <id>http://robotshell.com/2020/06/03/iot/iot_report_2020/</id>
    <published>2020-06-03T09:18:50.000Z</published>
    <updated>2020-06-03T09:18:50.508Z</updated>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="物联网" scheme="http://robotshell.com/categories/iot/"/>
    
    
      <category term="物联网" scheme="http://robotshell.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>简述Fuchsia内核Zircon之LK</title>
    <link href="http://robotshell.com/2020/01/08/os/zircon_LK/"/>
    <id>http://robotshell.com/2020/01/08/os/zircon_LK/</id>
    <published>2020-01-08T07:59:02.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Zircon是Fuchsia的内核部分，&lt;a href=&quot;https://www.robotshell.com/2020/01/02/os/zircon2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面的几篇文章&lt;/a&gt;简述了Zircon的一些常见的概念。&lt;br&gt;Ziron是作为&lt;a href=&quot;https://github.com/littlekernel/lk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LK&lt;/a&gt;的一个分支产生的，本文主要简述LK与Zircon相关的一些事情。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>简述Fuchsia内核Zircon二</title>
    <link href="http://robotshell.com/2020/01/02/os/zircon2/"/>
    <id>http://robotshell.com/2020/01/02/os/zircon2/</id>
    <published>2020-01-02T08:26:53.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.robotshell.com/2019/12/25/os/zircon/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;对Fuchsia的最底下一层Zircon层进行了简单介绍，并介绍了几个相关的概念：SystemCall、Handle、Koid。本文继续简述Fuchsia的Zircon中涉及的几个概念。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>简述Fuchsia内核Zircon</title>
    <link href="http://robotshell.com/2019/12/25/os/zircon/"/>
    <id>http://robotshell.com/2019/12/25/os/zircon/</id>
    <published>2019-12-25T08:43:25.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Zircon是Fuchsia系统的内核。严格的讲，应该说Zircon是Fuchsia系统的核心，是Fuchsia系统的最底一层（回想下Fuchsia系统的四层蛋糕结构）。它由一个微内核（/zircon/kernel)和少量的用户空间代码组成。这部分用户空间代码是一些核心的服务、驱动和类库等（/zircon/system/necessary)，用于系统引导，与底层硬件交互、加载用户空间的进程等。Fuchsia将在Zircon之上构建出庞大的OS。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>简述Fuchsia启动引导顺序</title>
    <link href="http://robotshell.com/2019/12/20/os/boot/"/>
    <id>http://robotshell.com/2019/12/20/os/boot/</id>
    <published>2019-12-20T04:11:10.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇简述fuchsia系统几个核心manager的启动引导顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化的四大组件之三</title>
    <link href="http://robotshell.com/2019/12/12/os/modular%20component3/"/>
    <id>http://robotshell.com/2019/12/12/os/modular component3/</id>
    <published>2019-12-12T09:41:54.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;参考前文：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/28/os/modular%20component/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化的四大组件之一&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/12/05/os/modular%20component2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化的四大组件之二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在前文对于&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;的介绍中提到，用户可以通过开发module、agent、entryprovider类别的组件来实现具体的业务逻辑，扩展系统的能力。这三大组件再结合由module组合而成的story，可以称之为是fuchsia系统内的四大组件。前面几篇文章依次对story、module、agent、entryprovider进行了介绍。在介绍story和module时，提高两个概念，用来承载story的storyshell和module 定义的用来处理请求的intent。本文对这两个角色简单的介绍下。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化的四大组件之二</title>
    <link href="http://robotshell.com/2019/12/05/os/modular%20component2/"/>
    <id>http://robotshell.com/2019/12/05/os/modular component2/</id>
    <published>2019-12-05T09:35:15.000Z</published>
    <updated>2020-03-23T10:56:08.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;参考前文：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/11/28/os/modular%20component/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化的四大组件之一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在前文对于&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;的介绍中提到，用户可以通过开发module、agent、entryprovider类别的组件来实现具体的业务逻辑，扩展系统的能力。这三大组件再结合由module组合而成的story，可以称之为是fuchsia系统内的四大组件。本文依次介绍这几种组件都是些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化的四大组件之一</title>
    <link href="http://robotshell.com/2019/11/28/os/modular%20component/"/>
    <id>http://robotshell.com/2019/11/28/os/modular component/</id>
    <published>2019-11-28T08:55:39.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在前文对于&lt;a href=&quot;https://www.robotshell.com/2019/11/20/os/modular/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia模块化&lt;/a&gt;的介绍中提到，用户可以通过开发module、agent、entryprovider类别的组件来实现具体的业务逻辑，扩展系统的能力。这三大组件再结合由module组合而成的story，可以称之为是fuchsia系统内的四大组件。本文依次介绍这几种组件都是些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia模块化介绍</title>
    <link href="http://robotshell.com/2019/11/20/os/modular/"/>
    <id>http://robotshell.com/2019/11/20/os/modular/</id>
    <published>2019-11-20T07:19:24.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Fuchisa的应用程序及应用程序框架是一个模块化的框架。Fuchsia系统中的组件包含着UI、数据、用户等内容，模块化框架将这些组合在一个逻辑概念上的可视化的被叫做story的容器中。从而实现对用户体验的统一管理。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Component 能力介绍</title>
    <link href="http://robotshell.com/2019/11/12/os/component%20capabilities/"/>
    <id>http://robotshell.com/2019/11/12/os/component capabilities/</id>
    <published>2019-11-12T09:17:26.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Capabilities 理解为能力、功能，就是赋予一个组件能够连接和读取其他组件提供的能力的权限。&lt;br&gt;fuchsia 中组件的能力，有三种，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory 能力&lt;/li&gt;
&lt;li&gt;Service 能力&lt;/li&gt;
&lt;li&gt;Storage 能力&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Component manifests介绍</title>
    <link href="http://robotshell.com/2019/11/05/os/component%20manifest/"/>
    <id>http://robotshell.com/2019/11/05/os/component manifest/</id>
    <published>2019-11-05T08:52:43.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;清单文件是用来描述组件的一个描述文件，扩展名为.cmx。通常位于工程的meta目录下。描述一个组件通常包含如下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于如何运行组件的信息&lt;/li&gt;
&lt;li&gt;子组件实例和组件集合的描述&lt;/li&gt;
&lt;li&gt;描述如何在组件之间使用、发布和提供功能的路由规则。&lt;/li&gt;
&lt;li&gt;自由形式的数据（“facets”）被组件框架忽略，但可以由第三方解释（类似android清单文件中的meta-data 数据）。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa Component介绍</title>
    <link href="http://robotshell.com/2019/10/28/os/component/"/>
    <id>http://robotshell.com/2019/10/28/os/component/</id>
    <published>2019-10-28T09:07:37.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Fuchsia系统中，Component是最基本的执行单元，他们对外提供能力也消费其他组件的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa之PackageManager</title>
    <link href="http://robotshell.com/2019/10/21/os/pm/"/>
    <id>http://robotshell.com/2019/10/21/os/pm/</id>
    <published>2019-10-21T09:29:16.000Z</published>
    <updated>2020-03-23T10:56:08.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上周，在Fuchsia OS上运行了第一个demo——HelloWorld，了解到编译完成后，需要使用fx的命令将编译好的Fuchisa的应用包传送到系统中，从而得到运行。本周简单介绍下Fuchsia Package。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchisa运行Hello,World</title>
    <link href="http://robotshell.com/2019/10/14/os/HelloWorld/"/>
    <id>http://robotshell.com/2019/10/14/os/HelloWorld/</id>
    <published>2019-10-14T08:16:38.000Z</published>
    <updated>2020-03-23T10:56:08.828Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的几篇一直都在介绍Fuchsia的一些概念，本文将在Fuchsia上运行我们的第一个应用，通过该示例可以快速了解到Fuchsia的components是如何编译、运行及测试的。Hello Fuchsia，Hello World。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的fx命令</title>
    <link href="http://robotshell.com/2019/09/29/os/fx/"/>
    <id>http://robotshell.com/2019/09/29/os/fx/</id>
    <published>2019-09-29T07:08:04.000Z</published>
    <updated>2020-03-23T10:56:08.828Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前在介绍fuchsia的编译（fuchsia的编译参考文章：&lt;a href=&quot;https://www.robotshell.com/2019/09/22/os/build/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia的运行初体验&lt;/a&gt;）的时候提到配置fuchsia的编译产品，以及编译fuchsia系统都会使用到fx命令。&lt;br&gt;fx对于Fuchsia的重要性，大概等于编译命令+adb 对于Android的重要性。而且fx有非常多的自命令，本文仅参考官方文档&lt;a href=&quot;https://fuchsia.dev/fuchsia-src/development/workflows/fx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fx workflows&lt;/a&gt;,对部分fx的自命令进行简单介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的数据存储变革</title>
    <link href="http://robotshell.com/2019/09/25/os/ledger/"/>
    <id>http://robotshell.com/2019/09/25/os/ledger/</id>
    <published>2019-09-25T09:38:47.000Z</published>
    <updated>2020-03-23T10:56:08.828Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;根据之前的介绍，Fuchsia引入了一个新的概念Story，Story由一系列的app组成用来完成独立的任务。在Fuchsia上，你可以快速的在不同的设备上切换以使用这些创建好的Story，而可以这样做的原因是，Fuchsia将这些Story的信息保存在了你的个人ledger中。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的运行初体验</title>
    <link href="http://robotshell.com/2019/09/22/os/build/"/>
    <id>http://robotshell.com/2019/09/22/os/build/</id>
    <published>2019-09-22T09:45:36.000Z</published>
    <updated>2020-03-23T10:56:08.826Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前几篇文章简单介绍了下Fuchsia中出现的与以往不同的概念。为了能够更直观的了解Fuchsia，这次让我们编译并运行Fuchsia。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>android之SystemServer的启动</title>
    <link href="http://robotshell.com/2019/09/18/android/BootSystemServer/"/>
    <id>http://robotshell.com/2019/09/18/android/BootSystemServer/</id>
    <published>2019-09-18T04:10:19.000Z</published>
    <updated>2020-03-23T10:56:08.826Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Android系统中恐怕是没有任何一个进程有SystemServer重要了。Android的大量核心Service都运行在SystemServer上，这些核心的Service笼统的讲几乎能代表整个Android的Framework层。Android区别于Linux的关键又在于Framework层，所以更进一步讲SystemServer几乎又可代表整个Android系统了。&lt;br&gt;本文主要分析SystemServer的启动过程，分析的方法类似于从一个地方到另外一个地方的旅游，不只是单纯的到达目的地，也会欣赏沿路的风景。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://robotshell.com/categories/android/"/>
    
    
      <category term="android" scheme="http://robotshell.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia：万物皆实体</title>
    <link href="http://robotshell.com/2019/09/16/os/entity/"/>
    <id>http://robotshell.com/2019/09/16/os/entity/</id>
    <published>2019-09-16T03:24:24.000Z</published>
    <updated>2020-03-23T10:56:08.826Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Fuchsia简述的更多文章：&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/08/30/os/what&#39;s%20fuchsia%20os/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Googel的Fuchsia OS到底是什么&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.robotshell.com/2019/09/06/os/stories&amp;modules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia的APP变革&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前在文章《Fuchsia的APP变革》中介绍过，Fuchisa的交互单位是story，而story是由一系列来自不同APP的module组合而成的。这些不同的module之间自然的就会涉及到通信问题。所以实体（entities）就应用而生了。Entity就如同胶水一般将各个module粘合在一次，从而构成story来供用户使用。同时这些从数字世界中抽象出的一个个实体，将作为数据单元被Google Assist读取使用，从而让Assistant获得理解用户使用上下文的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Fuchsia的APP变革</title>
    <link href="http://robotshell.com/2019/09/06/os/stories&amp;modules/"/>
    <id>http://robotshell.com/2019/09/06/os/stories&amp;modules/</id>
    <published>2019-09-06T06:17:34.000Z</published>
    <updated>2020-03-23T10:56:08.826Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相比之前的操作系统，Fuchsia做了很多的变革和特有的功能。Stories和Modules就是其中之一。这两个功能将颠覆之前对智能手机APP的使用方式，带来不一样的使用体验。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="http://robotshell.com/categories/os/"/>
    
    
      <category term="OS" scheme="http://robotshell.com/tags/OS/"/>
    
  </entry>
  
</feed>
